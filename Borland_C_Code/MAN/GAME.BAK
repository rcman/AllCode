//Code By Franco Gaetan
//E-Mail franco@inforamp.net
//http://www.inforamp.net/~franco
//Scrolling Going Down


#include <dos.h>
#include <stdio.h>
#include <stdlib.h>
#include <alloc.h>
#include <memory.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <mem.h>
#include "draw.h"

#define TOTALSHAPE 110



void CutImage(int saveareax, int savesreay, int spritenum);
void PutImage(int);
void RestoreBack(int spx,int spy, int spritenum );
void getch(void);
void initarray(void);
void copypageup(void);
void copypagedn(void);
int kbhit(void);
void initscreen(void);
void checkletter(int line);
int fileread(void);
void CheckImage(int line);
void SyncToVerticalRetrace( void );


void checkit(void);
//Global


static char ship1[16][16] = {

    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x17,0x17, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x17, 0x17, 0x17, 0x17,0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x17, 0x17, 0x17, 0x17, 0x17,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x17, 0x17, 0x17, 0x17, 0x17, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x17, 0x17, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },


  };


struct fshape
	{

		int w,h;
		int n,c;
		int flag;
		int rowflag;
		char far shp[260];
					// TOTALSHAPE  =  20
	} fshp[TOTALSHAPE];


void *buffer;
void *image;

char *pc[20];			// 20 Pointers for 20 Lines

int leng=0;
int totallength=0;
int spaceleftb=0;
int spaceleftt=0;
int bottom=190;	// bottom let add X to it to get shape
int line=0;
int let=0;
char p;
int v=0;


int nline=0;
int pixelcount=0;
int linecount=0;

unsigned int imsize;
int top = 290;
int spx=100;            // Pixels
int spy=190;
int spritenum=0;
int lp;
int x,y,xy1,xy,fl,tm;
int z=0;
unsigned int offset = 0;
int numspr=100;
char far *scrn  = MK_FP(0xa000,0);
char far *screen  = MK_FP(0xa000,0);
char far *destin = MK_FP(0xa000,0);

FILE *in, *out, *outdata;


void initscreen(void)
{



	printf(" ");
	destin = (char far *) farmalloc(64000l);

//      printf("%p",destin);

	if (destin == NULL)
		{
			 printf("Not enough memory to allocate screen buffer\n");
			 //Close_Mode();
			 exit(1);  /* terminate program if out of memory */

		}
		_fmemset(destin, 0, 64000);


}



void initarray(void)
{


	int c,sn,tempx,tempy,tempdir;

	for (c=0 ; c<numspr; c++)
	{
	randomize();
	// offset=random((1000)+1);
	PutImage(offset);
	}

}



void main(void)
{
	int i,xx,swav;

	pc[0] = "this is a test ";
	pc[1] = "hello to jiffry ";
	pc[2] = "come visit stay awhile ";
	pc[3] = "look around and enjoy ";
	pc[4] = "see you soon ";
	pc[5] = "hello to all my ";
	pc[6] = "friends ";
	pc[7] = "look around and enjoy ";
	pc[8] = "see you soon ";
	pc[9] = "hello to all my ";
	pc[10] = "friends ";
	pc[11] = "look around and enjoy ";
	pc[12] = "see you soon ";
	pc[13] = "hello to all my ";
	pc[14] = "friends ";
	pc[15] = "friends ";
	pc[16] = "look around and enjoy ";
	pc[17] = "see you soon ";
	pc[18] = "hello to all my ";
	pc[19] = "friends ";



	Init_Mode();
	fileread();

	checkit();

/*	checkletter(line);

	do {

	if (linecount==60)
		{
		linecount=0;
		pixelcount=0;
		nline = nline + 1;
		line = line + 1;
		checkletter(line);
		}


	if (pixelcount <=35)
	{
	CheckImage(line);
	}

		SyncToVerticalRetrace();
		copypageup();
		delay(10);
		linecount = linecount + 1;


	}while(nline!=14);

	for (i=0;i<200;i++)
		{
		delay(10);
		copypageup();
		}
  */
  getch();
	Close_Mode();

}

void PutImage(int offset)
{
	int o;
	for (o=0;o<100;o++)
	{

	*(scrn+offset+o)=1;
       }
}


int fileread(void)
{

	int s=0,i;
   struct fshape *p;

	if ((in = fopen("man.std", "rb"))
		 == NULL)
	{
		fprintf(stderr, "Cannot open input file.\n");
		return 1;

	}

	i=0;
	for (s=0,p=&fshp[s];s<TOTALSHAPE && feof ;s++,p=&fshp[s],i=0)

	while (i<256)
		{
	*(p->shp+i)=fgetc(in);
  //      printf("%x",*(p->shp+i));
	i++;
		}

	fclose(out);

	return 1;

}


void copypagedn()
{

//      printf("Start ASM");
	asm {
		 push ds
		 push es
		 push si
		 push di
		 mov ax,0xa000
		 mov es,ax
		 mov ds,ax

		 mov si, 0xf8c0
		 mov di, 0xfa00

		 mov cx, 16000
		 std
		 db 0x66
		 rep
		 movsw

		 pop di
		 pop si
		 pop es
		 pop ds
		 }
}



void copypageup()
{

//      printf("Start ASM");
	asm {
		 push ds
		 push es
		 push si
		 push di
		 mov ax,0xa000
		 mov es,ax
		 mov ds,ax

		 mov si, 0xa140
		 mov di, 0xa000

		 mov cx, 16000
		 cld
		 db 0x66
		 rep
		 movsw

		 pop di
		 pop si
		 pop es
		 pop ds
		 }
}



void checkletter(int line)
{

	int i;


	leng=0;


	// p = *(pc[0]+j);

	do {

		p = *(pc[line]+leng);
		leng +=1;
		v=(int)p;
	      //	printf("v = %d",v);
	      //  getch();

	}while(p!=0);

	totallength = leng-2;

	leng = leng / 2;
	leng = leng * 8;
	leng = 160 - leng;


}

void CheckImage(line)
{


	int i,x,y,over=0;


	if (offset <=64000)
	{


	offset=spy*320+leng;
						// Letter a = 60

	for (i=0;i<=totallength;i++)
	{
		p = *(pc[line]+i);		// ACS value of a = 97
		v=(int)p;

		let = v - 97;                   //
		let = let + 60;
	       //	printf("let= %d",let);
	      //	getch();
		if (let ==-5)
			let=36;



		for (x=0;x<=8;x++)
			{
		       //	delay(33);
				pixelcount=pixelcount+1;

				for (y=0;y<=8;y++)
				{
				*(screen+y+offset+over)=fshp[let].shp[x*16+y];
				 }
				 offset = offset + 320;      //bytes to next line
			 }

			 over = over + 9;
			 offset = spy*320+leng;
			 spy=190;
			 let=0;
			}
		}

 }


void checkit(void)
{

	int x,y,l;
	offset = 50*320+150;
	for (l=60;l<90;l++)
	{

		for (x=0;x<=16;x++)
			{
		      //	delay(33);

				for (y=0;y<=16;y++)
				{
				*(screen+y+offset)=fshp[l].shp[x*16+y];
				 }
				 offset = offset + 320;      //bytes to next line
			}
		getch();
		}

}




void SyncToVerticalRetrace( void )
  {
  // If we happen to be in the middle of a vertical retrace
  // period wait until its over.

  while( inp( 0x3da ) & 8 )
    ;

  // Wait until we begin vertical retrace.

  while( !(inp( 0x3da ) & 8) )
	 ;
  }
